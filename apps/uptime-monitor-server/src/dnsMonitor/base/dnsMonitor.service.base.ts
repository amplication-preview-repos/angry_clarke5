/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, DnsMonitor as PrismaDnsMonitor } from "@prisma/client";

export class DnsMonitorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DnsMonitorCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dnsMonitor.count(args);
  }

  async dnsMonitors<T extends Prisma.DnsMonitorFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DnsMonitorFindManyArgs>
  ): Promise<PrismaDnsMonitor[]> {
    return this.prisma.dnsMonitor.findMany<Prisma.DnsMonitorFindManyArgs>(args);
  }
  async dnsMonitor<T extends Prisma.DnsMonitorFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DnsMonitorFindUniqueArgs>
  ): Promise<PrismaDnsMonitor | null> {
    return this.prisma.dnsMonitor.findUnique(args);
  }
  async createDnsMonitor<T extends Prisma.DnsMonitorCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DnsMonitorCreateArgs>
  ): Promise<PrismaDnsMonitor> {
    return this.prisma.dnsMonitor.create<T>(args);
  }
  async updateDnsMonitor<T extends Prisma.DnsMonitorUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DnsMonitorUpdateArgs>
  ): Promise<PrismaDnsMonitor> {
    return this.prisma.dnsMonitor.update<T>(args);
  }
  async deleteDnsMonitor<T extends Prisma.DnsMonitorDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DnsMonitorDeleteArgs>
  ): Promise<PrismaDnsMonitor> {
    return this.prisma.dnsMonitor.delete(args);
  }
}
