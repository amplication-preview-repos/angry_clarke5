/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DnsMonitorService } from "../dnsMonitor.service";
import { DnsMonitorCreateInput } from "./DnsMonitorCreateInput";
import { DnsMonitor } from "./DnsMonitor";
import { DnsMonitorFindManyArgs } from "./DnsMonitorFindManyArgs";
import { DnsMonitorWhereUniqueInput } from "./DnsMonitorWhereUniqueInput";
import { DnsMonitorUpdateInput } from "./DnsMonitorUpdateInput";

export class DnsMonitorControllerBase {
  constructor(protected readonly service: DnsMonitorService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DnsMonitor })
  async createDnsMonitor(
    @common.Body() data: DnsMonitorCreateInput
  ): Promise<DnsMonitor> {
    return await this.service.createDnsMonitor({
      data: data,
      select: {
        createdAt: true,
        domain: true,
        id: true,
        lastChecked: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DnsMonitor] })
  @ApiNestedQuery(DnsMonitorFindManyArgs)
  async dnsMonitors(@common.Req() request: Request): Promise<DnsMonitor[]> {
    const args = plainToClass(DnsMonitorFindManyArgs, request.query);
    return this.service.dnsMonitors({
      ...args,
      select: {
        createdAt: true,
        domain: true,
        id: true,
        lastChecked: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DnsMonitor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dnsMonitor(
    @common.Param() params: DnsMonitorWhereUniqueInput
  ): Promise<DnsMonitor | null> {
    const result = await this.service.dnsMonitor({
      where: params,
      select: {
        createdAt: true,
        domain: true,
        id: true,
        lastChecked: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DnsMonitor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDnsMonitor(
    @common.Param() params: DnsMonitorWhereUniqueInput,
    @common.Body() data: DnsMonitorUpdateInput
  ): Promise<DnsMonitor | null> {
    try {
      return await this.service.updateDnsMonitor({
        where: params,
        data: data,
        select: {
          createdAt: true,
          domain: true,
          id: true,
          lastChecked: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DnsMonitor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDnsMonitor(
    @common.Param() params: DnsMonitorWhereUniqueInput
  ): Promise<DnsMonitor | null> {
    try {
      return await this.service.deleteDnsMonitor({
        where: params,
        select: {
          createdAt: true,
          domain: true,
          id: true,
          lastChecked: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
