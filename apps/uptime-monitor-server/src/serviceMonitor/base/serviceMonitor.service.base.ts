/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ServiceMonitor as PrismaServiceMonitor,
  ServiceStatus as PrismaServiceStatus,
} from "@prisma/client";

export class ServiceMonitorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ServiceMonitorCountArgs, "select">
  ): Promise<number> {
    return this.prisma.serviceMonitor.count(args);
  }

  async serviceMonitors<T extends Prisma.ServiceMonitorFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ServiceMonitorFindManyArgs>
  ): Promise<PrismaServiceMonitor[]> {
    return this.prisma.serviceMonitor.findMany<Prisma.ServiceMonitorFindManyArgs>(
      args
    );
  }
  async serviceMonitor<T extends Prisma.ServiceMonitorFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ServiceMonitorFindUniqueArgs>
  ): Promise<PrismaServiceMonitor | null> {
    return this.prisma.serviceMonitor.findUnique(args);
  }
  async createServiceMonitor<T extends Prisma.ServiceMonitorCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ServiceMonitorCreateArgs>
  ): Promise<PrismaServiceMonitor> {
    return this.prisma.serviceMonitor.create<T>(args);
  }
  async updateServiceMonitor<T extends Prisma.ServiceMonitorUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ServiceMonitorUpdateArgs>
  ): Promise<PrismaServiceMonitor> {
    return this.prisma.serviceMonitor.update<T>(args);
  }
  async deleteServiceMonitor<T extends Prisma.ServiceMonitorDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ServiceMonitorDeleteArgs>
  ): Promise<PrismaServiceMonitor> {
    return this.prisma.serviceMonitor.delete(args);
  }

  async findServiceStatuses(
    parentId: string,
    args: Prisma.ServiceStatusFindManyArgs
  ): Promise<PrismaServiceStatus[]> {
    return this.prisma.serviceMonitor
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .serviceStatuses(args);
  }
}
