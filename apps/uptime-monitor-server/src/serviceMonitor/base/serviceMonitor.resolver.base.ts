/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ServiceMonitor } from "./ServiceMonitor";
import { ServiceMonitorCountArgs } from "./ServiceMonitorCountArgs";
import { ServiceMonitorFindManyArgs } from "./ServiceMonitorFindManyArgs";
import { ServiceMonitorFindUniqueArgs } from "./ServiceMonitorFindUniqueArgs";
import { CreateServiceMonitorArgs } from "./CreateServiceMonitorArgs";
import { UpdateServiceMonitorArgs } from "./UpdateServiceMonitorArgs";
import { DeleteServiceMonitorArgs } from "./DeleteServiceMonitorArgs";
import { ServiceStatusFindManyArgs } from "../../serviceStatus/base/ServiceStatusFindManyArgs";
import { ServiceStatus } from "../../serviceStatus/base/ServiceStatus";
import { ServiceMonitorService } from "../serviceMonitor.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ServiceMonitor)
export class ServiceMonitorResolverBase {
  constructor(
    protected readonly service: ServiceMonitorService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ServiceMonitor",
    action: "read",
    possession: "any",
  })
  async _serviceMonitorsMeta(
    @graphql.Args() args: ServiceMonitorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ServiceMonitor])
  @nestAccessControl.UseRoles({
    resource: "ServiceMonitor",
    action: "read",
    possession: "any",
  })
  async serviceMonitors(
    @graphql.Args() args: ServiceMonitorFindManyArgs
  ): Promise<ServiceMonitor[]> {
    return this.service.serviceMonitors(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ServiceMonitor, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ServiceMonitor",
    action: "read",
    possession: "own",
  })
  async serviceMonitor(
    @graphql.Args() args: ServiceMonitorFindUniqueArgs
  ): Promise<ServiceMonitor | null> {
    const result = await this.service.serviceMonitor(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ServiceMonitor)
  @nestAccessControl.UseRoles({
    resource: "ServiceMonitor",
    action: "create",
    possession: "any",
  })
  async createServiceMonitor(
    @graphql.Args() args: CreateServiceMonitorArgs
  ): Promise<ServiceMonitor> {
    return await this.service.createServiceMonitor({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ServiceMonitor)
  @nestAccessControl.UseRoles({
    resource: "ServiceMonitor",
    action: "update",
    possession: "any",
  })
  async updateServiceMonitor(
    @graphql.Args() args: UpdateServiceMonitorArgs
  ): Promise<ServiceMonitor | null> {
    try {
      return await this.service.updateServiceMonitor({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ServiceMonitor)
  @nestAccessControl.UseRoles({
    resource: "ServiceMonitor",
    action: "delete",
    possession: "any",
  })
  async deleteServiceMonitor(
    @graphql.Args() args: DeleteServiceMonitorArgs
  ): Promise<ServiceMonitor | null> {
    try {
      return await this.service.deleteServiceMonitor(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ServiceStatus], { name: "serviceStatuses" })
  @nestAccessControl.UseRoles({
    resource: "ServiceStatus",
    action: "read",
    possession: "any",
  })
  async findServiceStatuses(
    @graphql.Parent() parent: ServiceMonitor,
    @graphql.Args() args: ServiceStatusFindManyArgs
  ): Promise<ServiceStatus[]> {
    const results = await this.service.findServiceStatuses(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
