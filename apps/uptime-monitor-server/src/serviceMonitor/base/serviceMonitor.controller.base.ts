/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ServiceMonitorService } from "../serviceMonitor.service";
import { ServiceMonitorCreateInput } from "./ServiceMonitorCreateInput";
import { ServiceMonitor } from "./ServiceMonitor";
import { ServiceMonitorFindManyArgs } from "./ServiceMonitorFindManyArgs";
import { ServiceMonitorWhereUniqueInput } from "./ServiceMonitorWhereUniqueInput";
import { ServiceMonitorUpdateInput } from "./ServiceMonitorUpdateInput";
import { ServiceStatusFindManyArgs } from "../../serviceStatus/base/ServiceStatusFindManyArgs";
import { ServiceStatus } from "../../serviceStatus/base/ServiceStatus";
import { ServiceStatusWhereUniqueInput } from "../../serviceStatus/base/ServiceStatusWhereUniqueInput";

export class ServiceMonitorControllerBase {
  constructor(protected readonly service: ServiceMonitorService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ServiceMonitor })
  async createServiceMonitor(
    @common.Body() data: ServiceMonitorCreateInput
  ): Promise<ServiceMonitor> {
    return await this.service.createServiceMonitor({
      data: data,
      select: {
        createdAt: true,
        id: true,
        isActive: true,
        name: true,
        updatedAt: true,
        url: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ServiceMonitor] })
  @ApiNestedQuery(ServiceMonitorFindManyArgs)
  async serviceMonitors(
    @common.Req() request: Request
  ): Promise<ServiceMonitor[]> {
    const args = plainToClass(ServiceMonitorFindManyArgs, request.query);
    return this.service.serviceMonitors({
      ...args,
      select: {
        createdAt: true,
        id: true,
        isActive: true,
        name: true,
        updatedAt: true,
        url: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ServiceMonitor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async serviceMonitor(
    @common.Param() params: ServiceMonitorWhereUniqueInput
  ): Promise<ServiceMonitor | null> {
    const result = await this.service.serviceMonitor({
      where: params,
      select: {
        createdAt: true,
        id: true,
        isActive: true,
        name: true,
        updatedAt: true,
        url: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ServiceMonitor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateServiceMonitor(
    @common.Param() params: ServiceMonitorWhereUniqueInput,
    @common.Body() data: ServiceMonitorUpdateInput
  ): Promise<ServiceMonitor | null> {
    try {
      return await this.service.updateServiceMonitor({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          isActive: true,
          name: true,
          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ServiceMonitor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteServiceMonitor(
    @common.Param() params: ServiceMonitorWhereUniqueInput
  ): Promise<ServiceMonitor | null> {
    try {
      return await this.service.deleteServiceMonitor({
        where: params,
        select: {
          createdAt: true,
          id: true,
          isActive: true,
          name: true,
          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/serviceStatuses")
  @ApiNestedQuery(ServiceStatusFindManyArgs)
  async findServiceStatuses(
    @common.Req() request: Request,
    @common.Param() params: ServiceMonitorWhereUniqueInput
  ): Promise<ServiceStatus[]> {
    const query = plainToClass(ServiceStatusFindManyArgs, request.query);
    const results = await this.service.findServiceStatuses(params.id, {
      ...query,
      select: {
        checkedAt: true,
        createdAt: true,
        id: true,

        serviceMonitor: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/serviceStatuses")
  async connectServiceStatuses(
    @common.Param() params: ServiceMonitorWhereUniqueInput,
    @common.Body() body: ServiceStatusWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      serviceStatuses: {
        connect: body,
      },
    };
    await this.service.updateServiceMonitor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/serviceStatuses")
  async updateServiceStatuses(
    @common.Param() params: ServiceMonitorWhereUniqueInput,
    @common.Body() body: ServiceStatusWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      serviceStatuses: {
        set: body,
      },
    };
    await this.service.updateServiceMonitor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/serviceStatuses")
  async disconnectServiceStatuses(
    @common.Param() params: ServiceMonitorWhereUniqueInput,
    @common.Body() body: ServiceStatusWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      serviceStatuses: {
        disconnect: body,
      },
    };
    await this.service.updateServiceMonitor({
      where: params,
      data,
      select: { id: true },
    });
  }
}
