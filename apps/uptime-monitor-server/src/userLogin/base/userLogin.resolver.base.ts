/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserLogin } from "./UserLogin";
import { UserLoginCountArgs } from "./UserLoginCountArgs";
import { UserLoginFindManyArgs } from "./UserLoginFindManyArgs";
import { UserLoginFindUniqueArgs } from "./UserLoginFindUniqueArgs";
import { CreateUserLoginArgs } from "./CreateUserLoginArgs";
import { UpdateUserLoginArgs } from "./UpdateUserLoginArgs";
import { DeleteUserLoginArgs } from "./DeleteUserLoginArgs";
import { Role } from "../../role/base/Role";
import { UserLoginService } from "../userLogin.service";
@graphql.Resolver(() => UserLogin)
export class UserLoginResolverBase {
  constructor(protected readonly service: UserLoginService) {}

  async _userLoginsMeta(
    @graphql.Args() args: UserLoginCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserLogin])
  async userLogins(
    @graphql.Args() args: UserLoginFindManyArgs
  ): Promise<UserLogin[]> {
    return this.service.userLogins(args);
  }

  @graphql.Query(() => UserLogin, { nullable: true })
  async userLogin(
    @graphql.Args() args: UserLoginFindUniqueArgs
  ): Promise<UserLogin | null> {
    const result = await this.service.userLogin(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserLogin)
  async createUserLogin(
    @graphql.Args() args: CreateUserLoginArgs
  ): Promise<UserLogin> {
    return await this.service.createUserLogin({
      ...args,
      data: {
        ...args.data,

        role: args.data.role
          ? {
              connect: args.data.role,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => UserLogin)
  async updateUserLogin(
    @graphql.Args() args: UpdateUserLoginArgs
  ): Promise<UserLogin | null> {
    try {
      return await this.service.updateUserLogin({
        ...args,
        data: {
          ...args.data,

          role: args.data.role
            ? {
                connect: args.data.role,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserLogin)
  async deleteUserLogin(
    @graphql.Args() args: DeleteUserLoginArgs
  ): Promise<UserLogin | null> {
    try {
      return await this.service.deleteUserLogin(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Role, {
    nullable: true,
    name: "role",
  })
  async getRole(@graphql.Parent() parent: UserLogin): Promise<Role | null> {
    const result = await this.service.getRole(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
