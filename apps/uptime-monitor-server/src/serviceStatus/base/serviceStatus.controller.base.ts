/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ServiceStatusService } from "../serviceStatus.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ServiceStatusCreateInput } from "./ServiceStatusCreateInput";
import { ServiceStatus } from "./ServiceStatus";
import { ServiceStatusFindManyArgs } from "./ServiceStatusFindManyArgs";
import { ServiceStatusWhereUniqueInput } from "./ServiceStatusWhereUniqueInput";
import { ServiceStatusUpdateInput } from "./ServiceStatusUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ServiceStatusControllerBase {
  constructor(
    protected readonly service: ServiceStatusService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ServiceStatus })
  @nestAccessControl.UseRoles({
    resource: "ServiceStatus",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createServiceStatus(
    @common.Body() data: ServiceStatusCreateInput
  ): Promise<ServiceStatus> {
    return await this.service.createServiceStatus({
      data: {
        ...data,

        serviceMonitor: data.serviceMonitor
          ? {
              connect: data.serviceMonitor,
            }
          : undefined,
      },
      select: {
        checkedAt: true,
        createdAt: true,
        id: true,

        serviceMonitor: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [ServiceStatus] })
  @ApiNestedQuery(ServiceStatusFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ServiceStatus",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async serviceStatuses(
    @common.Req() request: Request
  ): Promise<ServiceStatus[]> {
    const args = plainToClass(ServiceStatusFindManyArgs, request.query);
    return this.service.serviceStatuses({
      ...args,
      select: {
        checkedAt: true,
        createdAt: true,
        id: true,

        serviceMonitor: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ServiceStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ServiceStatus",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async serviceStatus(
    @common.Param() params: ServiceStatusWhereUniqueInput
  ): Promise<ServiceStatus | null> {
    const result = await this.service.serviceStatus({
      where: params,
      select: {
        checkedAt: true,
        createdAt: true,
        id: true,

        serviceMonitor: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ServiceStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ServiceStatus",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateServiceStatus(
    @common.Param() params: ServiceStatusWhereUniqueInput,
    @common.Body() data: ServiceStatusUpdateInput
  ): Promise<ServiceStatus | null> {
    try {
      return await this.service.updateServiceStatus({
        where: params,
        data: {
          ...data,

          serviceMonitor: data.serviceMonitor
            ? {
                connect: data.serviceMonitor,
              }
            : undefined,
        },
        select: {
          checkedAt: true,
          createdAt: true,
          id: true,

          serviceMonitor: {
            select: {
              id: true,
            },
          },

          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ServiceStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ServiceStatus",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteServiceStatus(
    @common.Param() params: ServiceStatusWhereUniqueInput
  ): Promise<ServiceStatus | null> {
    try {
      return await this.service.deleteServiceStatus({
        where: params,
        select: {
          checkedAt: true,
          createdAt: true,
          id: true,

          serviceMonitor: {
            select: {
              id: true,
            },
          },

          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
