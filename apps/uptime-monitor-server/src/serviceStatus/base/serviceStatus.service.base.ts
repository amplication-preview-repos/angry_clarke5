/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ServiceStatus as PrismaServiceStatus,
  ServiceMonitor as PrismaServiceMonitor,
} from "@prisma/client";

export class ServiceStatusServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ServiceStatusCountArgs, "select">
  ): Promise<number> {
    return this.prisma.serviceStatus.count(args);
  }

  async serviceStatuses<T extends Prisma.ServiceStatusFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ServiceStatusFindManyArgs>
  ): Promise<PrismaServiceStatus[]> {
    return this.prisma.serviceStatus.findMany<Prisma.ServiceStatusFindManyArgs>(
      args
    );
  }
  async serviceStatus<T extends Prisma.ServiceStatusFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ServiceStatusFindUniqueArgs>
  ): Promise<PrismaServiceStatus | null> {
    return this.prisma.serviceStatus.findUnique(args);
  }
  async createServiceStatus<T extends Prisma.ServiceStatusCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ServiceStatusCreateArgs>
  ): Promise<PrismaServiceStatus> {
    return this.prisma.serviceStatus.create<T>(args);
  }
  async updateServiceStatus<T extends Prisma.ServiceStatusUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ServiceStatusUpdateArgs>
  ): Promise<PrismaServiceStatus> {
    return this.prisma.serviceStatus.update<T>(args);
  }
  async deleteServiceStatus<T extends Prisma.ServiceStatusDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ServiceStatusDeleteArgs>
  ): Promise<PrismaServiceStatus> {
    return this.prisma.serviceStatus.delete(args);
  }

  async getServiceMonitor(
    parentId: string
  ): Promise<PrismaServiceMonitor | null> {
    return this.prisma.serviceStatus
      .findUnique({
        where: { id: parentId },
      })
      .serviceMonitor();
  }
}
