/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ServiceStatus } from "./ServiceStatus";
import { ServiceStatusCountArgs } from "./ServiceStatusCountArgs";
import { ServiceStatusFindManyArgs } from "./ServiceStatusFindManyArgs";
import { ServiceStatusFindUniqueArgs } from "./ServiceStatusFindUniqueArgs";
import { CreateServiceStatusArgs } from "./CreateServiceStatusArgs";
import { UpdateServiceStatusArgs } from "./UpdateServiceStatusArgs";
import { DeleteServiceStatusArgs } from "./DeleteServiceStatusArgs";
import { ServiceMonitor } from "../../serviceMonitor/base/ServiceMonitor";
import { ServiceStatusService } from "../serviceStatus.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ServiceStatus)
export class ServiceStatusResolverBase {
  constructor(
    protected readonly service: ServiceStatusService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ServiceStatus",
    action: "read",
    possession: "any",
  })
  async _serviceStatusesMeta(
    @graphql.Args() args: ServiceStatusCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ServiceStatus])
  @nestAccessControl.UseRoles({
    resource: "ServiceStatus",
    action: "read",
    possession: "any",
  })
  async serviceStatuses(
    @graphql.Args() args: ServiceStatusFindManyArgs
  ): Promise<ServiceStatus[]> {
    return this.service.serviceStatuses(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ServiceStatus, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ServiceStatus",
    action: "read",
    possession: "own",
  })
  async serviceStatus(
    @graphql.Args() args: ServiceStatusFindUniqueArgs
  ): Promise<ServiceStatus | null> {
    const result = await this.service.serviceStatus(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ServiceStatus)
  @nestAccessControl.UseRoles({
    resource: "ServiceStatus",
    action: "create",
    possession: "any",
  })
  async createServiceStatus(
    @graphql.Args() args: CreateServiceStatusArgs
  ): Promise<ServiceStatus> {
    return await this.service.createServiceStatus({
      ...args,
      data: {
        ...args.data,

        serviceMonitor: args.data.serviceMonitor
          ? {
              connect: args.data.serviceMonitor,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ServiceStatus)
  @nestAccessControl.UseRoles({
    resource: "ServiceStatus",
    action: "update",
    possession: "any",
  })
  async updateServiceStatus(
    @graphql.Args() args: UpdateServiceStatusArgs
  ): Promise<ServiceStatus | null> {
    try {
      return await this.service.updateServiceStatus({
        ...args,
        data: {
          ...args.data,

          serviceMonitor: args.data.serviceMonitor
            ? {
                connect: args.data.serviceMonitor,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ServiceStatus)
  @nestAccessControl.UseRoles({
    resource: "ServiceStatus",
    action: "delete",
    possession: "any",
  })
  async deleteServiceStatus(
    @graphql.Args() args: DeleteServiceStatusArgs
  ): Promise<ServiceStatus | null> {
    try {
      return await this.service.deleteServiceStatus(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => ServiceMonitor, {
    nullable: true,
    name: "serviceMonitor",
  })
  @nestAccessControl.UseRoles({
    resource: "ServiceMonitor",
    action: "read",
    possession: "any",
  })
  async getServiceMonitor(
    @graphql.Parent() parent: ServiceStatus
  ): Promise<ServiceMonitor | null> {
    const result = await this.service.getServiceMonitor(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
